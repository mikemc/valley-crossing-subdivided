"""Drift time distribution for locally deleterious single mutants.
"""
import sys
import numpy as np
import matplotlib.pyplot as plt

from pylab import *

src_path = '/home/michael/research/valley_crossing/metapopulations/asexual/src/'
sys.path += [src_path + 'analysis/',
    src_path + 'simulations/successful_single_mutants/',
]
import predictions as pred
from data_processing_functions import read_times

# Configure matplotlib
from matplotlib import rcParams
%run ~/research/valley_crossing/metapopulations/asexual/src/figures/matplotlib_rcparams.py

## Colors
color_A = '#e6550d'
color_B = '#e6550d'
color_AB = 'k'
color_hist = '0.8'

##### Set parameters and load the data
# Parameters
L = 50; N = 1e2; Ntot = L * N;
alpha = 0.5; Ne = N / (2 * alpha)
mu = mu1 = 4e-8; delta = 4e-2; s = 5e-2;
p2 = s / alpha
# Migrtation rate
m = 2.4e-5
# Read in data
% cd /home/michael/Dropbox/research/valley_crossing/metapopulations/asexual/
% cd src/simulations/successful_single_mutants/
% cd output/island_L50_N1e2_mu4e-8_d4e-2_s5e-2
df = read_times("asex_p1_Li50_Lj1_N1e2_mu4e-8_d4e-2_s5e-2_mi0_mj0_m2.4e-5_all")
# Truncate to first 10^4 lineages (out of 10670 total lineages)
df = df[:10000]

#### Theoretical predictions
## Type A lineages -- lineages that do not fix within a deme
# pdf_wm = pred.drift_time_cdf_wm(alpha, mu1, delta, s, pdf=True)
# With correction for small increase in Fst
Fst = 1 / (N / alpha * (delta + m))
A = 1 - Fst
# Prediction using full solution for cdf of drift time
# pdf_wm = pred.drift_time_cdf_wm(A*alpha, mu1, A*delta, s, p2=s/alpha, pdf=True)
# Deleterious approximation
pdf_wm = lambda t: A*delta*exp(-A*delta*t)
## Type B lineages -- lineages that do fix within a deme
# Local fixation probabilities
u10 = delta/alpha / (exp(N*delta/alpha) - 1)
u01 = delta/alpha / (1 - exp(-N*delta/alpha))
u21 = (s+delta)/alpha / (1 - exp(-N*(s+delta)/alpha))
# Probability that a 2-mutant deme spreads through the entire population
theta = 1 - exp(-N*s/alpha)
# Rates
D_1 = N * m * u01
U_1 = N * mu1 * u21
# Can approximate pdf either way
pdf_dbd = lambda t: (D_1 + U_1) * exp(-(D_1 + U_1) * t)
# pdf_dbd2 = pred.drift_time_cdf_sub_deme_bd(N, alpha, mu1, delta, s, m, pdf=True)
# Calculate the densities for the two types, plus the total
t_arr = np.logspace(0, 5, 1e3)
density_wm = array([pdf_wm(t) for t in t_arr])
density_dbd = array([pdf_dbd(t) for t in t_arr])
density_tot = (density_wm + density_dbd)/2

## Compute histogram from simulation data
t1 = df['t1']
t1_max = np.max(t1)
# bins = np.hstack((np.arange(0, 50, 2), np.logspace(np.log10(50), np.log10(1e5), 50)))
# bins = np.hstack((np.array((0, 1, 2, 3, 4, 6, 8)), np.logspace(1, 5, 40)))
# Bins linearly spaced every 2 generations from gen 0 to 10, then log spaced
# every factor of 10**(1/10)
bins = np.hstack((np.arange(0, 10, 2), np.logspace(1, 5, 41)))

#### Make the plot
# Initially, make the figure twice as big as it needs to be to ensure enough
# room, and then trim whitespace when saving
axes_size = array((2.75, 1.75))
fig = plt.figure()
fig.set_size_inches(2 * axes_size)
# Set axes rectagle (left, bottom, width, height) to occupy the center of the
# figure. Numbers are fractions of the figure width/height.
ax = fig.add_axes((0.25, 0.25, 0.5, 0.5))
## Spines
# Hide the right and top spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
## Tick lines
# Only show ticks on the left and bottom spines
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
## X axis
ax.set_xlabel(r"Time, $t$", labelpad=1)
ax.set_xscale("log")
ax.set_xlim(1e0, 1e5)
# Major tick marks at special locations
# t1_A = 1/((1-Fst)*delta)
# t1_B = 1/(D_1 + U_1)
# ax.set_xticks((t1_A, t1_B))
# ax.set_xticklabels((r'$\E[\mathcal T_{1}^{(A)}]$', 
#     r'$\E[\mathcal T_1^{(B)}]$' ))
ax.set_xticks((1/delta, alpha/(N*m*delta)))
ax.set_xticklabels((r'$\frac{1}{\delta}$', 
    r'$\frac{\alpha}{Nm\delta}$' ))
# Minor ticks to denote orders of magnitude; avoid overlapping with major ticks
ax.set_xticks((1, 1e1, 1e2, 1e3, 1e4, 1e5), minor=True)
ax.set_xticklabels((r'$1$',) + ('',)*4 + (r'$10^5$',), minor=True)
ax.tick_params(axis='both', colors='0.5', which='minor')
## Y axis
ax.set_yscale("log")
ax.set_ylim(1e-8, 1e-1)
# Major tick marks at special locations
ax.set_yticks(())
ax.set_yticklabels(())
# Minor ticks to denote orders of magnitude
ax.set_yticks(10**arange(-8., -0.9), minor=True)
# ax.set_yticklabels((r'$10^{-8}$', '', '', '', r'$10^{-4}$', '', '',
#     r'$10^{-1}$',), minor=True)
ax.set_yticklabels((r'$10^{-8}$', '', r'$10^{-6}$', '', r'$10^{-4}$', '', r'$10^{-2}$',
    '',), minor=True)
# Y label horizontal and above axis
ylab = text(1.5e-1, 2.4e-1,
    r'\noindent Probability density of\\the drift time, $\mathcal T_1$', 
    horizontalalignment='left', verticalalignment='bottom')


# plot predictions
plot(t_arr, density_wm/2, 'k-', color=color_A, label=r'Type A') 
plot(t_arr, density_dbd/2, 'k--', color=color_B, label=r'Type B') 
# plot(t_arr, density_tot, 'k:', color=color_AB, label=r'Both') 
hist(t1, bins=bins, normed=True, histtype='stepfilled',
        color=color_hist, lw=0)

## Spines
# Clip left and bottom axes to data range and offset axes outward
ax.spines['left'].set_bounds(ax.get_yticks(minor=True).min(), ax.get_yticks(minor=True).max())
ax.spines['bottom'].set_bounds(ax.get_xticks(minor=True).min(),
        ax.get_xticks(minor=True).max())
ax.spines['left'].set_position(('outward', 10))
ax.spines['bottom'].set_position(('outward', 10))


# Save figure
# %cd ~/Dropbox/research/valley_crossing/metapopulations/asexual/tex/figures/
# In Genetics Overleaf example file, width of a one-column figure is 3.461 in
# and entire page width (text area) is 7.275 inches
# However, in current genetics articles the text-page size is 7.022 in and one
# column of text is 3.406 in. 
# I will aim for 3.4 inches for a one-column figure.

# If a cla() has been called, it is necessary to first call this again:
fig.set_size_inches(2 * axes_size, forward=True)

# This will trim whitespace while keeping axes at size axes_size
fig.savefig('/tmp/t1_dist_D8.pdf', bbox_inches='tight', pad_inches=0.03)

# This will replace the manuscript's figure
fig.savefig('/home/michael/research/valley_crossing/metapopulations/asexual/tex/figures/t1_dist_D8.pdf',
        bbox_inches='tight', pad_inches=0.03)

# ## Arrows indicating the average drift times
# # Well-mixed
# t1 = 1/delta
# prob = pdf_wm(t1)
# arrow1 = annotate(r'', xy=(t1, prob), xycoords='data',
#         xytext=(t1 * 1.5, prob*3), textcoords='data',
#         arrowprops=dict(arrowstyle='simple', facecolor='black', linewidth=0.1,
#             shrinkA=0, shrinkB=0))
# text1 = text(t1*3, prob*3, r'$t = \E[\mathcal{T}_{1,\text{wm}}]$',
#         horizontalalignment='center', verticalalignment='bottom')
# 
# # Subdivided
# t1 = pred.drift_time_sub_deme_bd(N, alpha, mu1, delta, s, m)
# prob = pdf_dbd(t1)
# arrow1 = annotate(r'', xy=(t1, prob), xycoords='data',
#         xytext=(t1 * 1.5, prob*3), textcoords='data',
#         arrowprops=dict(arrowstyle='simple', facecolor='black', linewidth=0.1,
#             shrinkA=0, shrinkB=0))
# text1 = text(t1*3, prob*3, r'$t = \E[\mathcal{T}_{1,\text{DBD}}]$',
#         horizontalalignment='center', verticalalignment='bottom')

