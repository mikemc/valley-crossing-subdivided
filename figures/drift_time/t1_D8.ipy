"""Figure of $\E[\T_1]$ for D=8 showing main results.
"""
import sys
import numpy as np
import matplotlib.pyplot as plt

from pylab import *

sys.path += ['/home/michael/research/valley_crossing/metapopulations/asexual/'\
        + 'src/analysis/']
import predictions as pred

# Configure matplotlib
from matplotlib import rcParams
%run ~/research/valley_crossing/metapopulations/asexual/src/figures/matplotlib_rcparams.py

##### Set parameters and load the data
# Parameters
L = 50; N = 1e2; Ntot = L * N;
alpha = 0.5; Ne = N / (2 * alpha)
mu1 = 4e-8; delta = 4e-2; s = 5e-2;
# Read in data
% cd /home/michael/Dropbox/research/valley_crossing/metapopulations/asexual/
% cd src/simulations/successful_single_mutants/
% cd output/island_L50_N1e2_mu4e-8_d4e-2_s5e-2
df = np.load('summary_data.npy')
# The 2-mutant often does not fix by tfinal in the runs with m=1e-8 and 1e-9
# However, we will # count the still segregating runs as successes in this
# case; this is justified since theta \approx 1.
df[0]['num_success'] += df[0]['num_seg']
df[1]['num_success'] += df[1]['num_seg']
# Leave out the data point where m=m^\dagger
df = df[df['m'] != 2.4e-5]

## Colors
# Color for main prediction line
# Original color was '#FF9900'; color on SMBE poster is '#e6550d' 
color_pred = '#e6550d'

#### Make the plot
# Initially, make the figure twice as big as it needs to be to ensure enough
# room, and then trim whitespace when saving
axes_size = array((2.92, 1.7))
fig = plt.figure()
fig.set_size_inches(2 * axes_size)
# Set axes rectagle (left, bottom, width, height) to occupy the center of the
# figure. Numbers are fractions of the figure width/height.
ax = fig.add_axes((0.25, 0.25, 0.5, 0.5))
# Hide the right and top spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
## Tick lines
# Only show ticks on the left and bottom spines
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
## X axis
ax.set_xlabel(r"Migration rate, $m$", labelpad=3)
ax.set_xscale("log")
ax.set_xlim(1e-10, 1)
# Major tick marks at special locations
m_dagger = delta * (delta + s) / (s * (exp(N*delta/alpha)-1))
# With an additional mark at sqrt(eta)*alpha/N
eta = N * delta / (alpha * exp(N*delta/alpha)) * (delta + s) / s
ax.set_xticks((mu1 * (1 + s / delta), eta * alpha/N, sqrt(eta)*alpha/N, alpha/N))
ax.set_xticklabels((r'$\frac{\mu_1 (\delta + s)}{\delta}$', 
    r'$\frac{\eta\alpha}{N}$', r'$\frac{\sqrt{\eta}\alpha}{N}$',
    r'$\frac{\alpha}{N}$'))
# Without additional mark
# ax.set_xticks((mu1 * (1 + s / delta), m_dagger, alpha/N))
# ax.set_xticklabels((r'$\frac{\mu_1 (\delta + s)}{\delta}$', 
#     r'$\frac{\eta\alpha}{N}$', r'$\frac{\alpha}{N}$'))
# Minor ticks to denote orders of magnitude; avoid overlapping with major ticks
ax.set_xticks((1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1),
        minor=True)
ax.set_xticklabels((r'$10^{-9}$',) + ('',)*8 + (r'$1$',), minor=True)
ax.tick_params(axis='both', colors='0.5', which='minor')
## Y axis
ax.set_yscale("log")
ax.set_ylim(1e1, 4e6) # span is approx 5.6 log units
# Major tick marks at special locations
ax.set_yticks((alpha/(N*mu1*(delta+s)), 1/delta))
ax.set_yticklabels((r'$\frac{\alpha}{N\mu_1(\delta+s)}$', 
    r'$\frac{1}{\delta}$'))
# Minor ticks to denote orders of magnitude
ax.set_yticks((1e2, 1e3, 1e4, 1e5, 1e6), minor=True)
# ax.set_yticklabels((r'$10^2$', r'$10^3$', r'$10^{4}$', r'$10^{5}$', ''), minor=True)
ax.set_yticklabels((r'', r'$10^3$', r'', r'$10^{5}$', ''), minor=True)
# Y label horizontal and above axis
ylab = text(1e-11, 5.5e6, 
    r'\noindent Average drift time, $\avg{\mathcal{T}_1}$',
    horizontalalignment='left', verticalalignment='bottom')

## Theoretical prediction
# Equilibrim Fst approximation
m_arr = np.logspace(-9.5, 0, 300)
# Feqd_arr = 1 / (N * (m_arr + delta) / alpha)
# p1_eq_arr = mu1 * s / (alpha * delta * (1 - Feq_arr))
# t1_eq_arr = 1 / ((1 - Feq_arr) * delta)
p1A_arr = np.repeat(mu1 * s / (alpha * delta), len(m_arr))
t1A_arr = np.repeat(1 / delta, len(m_arr))
plot(m_arr, t1A_arr, 'k-', color=color_pred, label=r'')

# Deme birth-death approximation
# Local fixation probabilities
u10 = delta/alpha / (exp(N*delta/alpha) - 1)
u01 = delta/alpha / (1 - exp(-N*delta/alpha))
u21 = (s+delta)/alpha / (1 - exp(-N*(s+delta)/alpha))
# Probability that a 2-mutant deme spreads through the entire population
theta = 1 - exp(-N*s/alpha)
p1B_arr = u10 * mu1 * u21 * theta / (m_arr * u01 + mu1 * u21)
t1B_arr = 1 / (N * (m_arr * u01 + mu1 * u21) )
# t1_dbd_arr = np.array([pred.drift_time_sub_deme_bd(N, alpha, mu1, delta, s, m)
#     for m in m_arr])
plot(m_arr, t1B_arr, 'k--', color=color_pred, label=r'')

# Both pathways comes as the average weighted by the probabilities of either
# pathway
p1_tot = p1A_arr + p1B_arr
t1_tot = (t1A_arr * p1A_arr + t1B_arr * p1B_arr) / p1_tot
plot(m_arr, t1_tot, 'k:', color='k', label=r'')

## Simulation results
# Estimated drift time
t1_est = df['t1']
# Estimated standard error of the estimated t1
t1_se = df['t1_se']
# This is small enough that we shouldn't need to plot it. Always double check
# this on the final figure.
# errorbar(2 * N * df['m'], t1_est, yerr=1.96*t1_se, fmt='g^', 
#         label=r'$\mathcal T_1$')
plot(df['m'], t1_est, 'ko', clip_on=False, label=r'$simulations$')

# Color the regions corresponding to the different regimes
# isolated demes, deleterious
axvspan(0, mu1 * (1 + s/delta),
        facecolor='#fdae6b', linewidth=0)
# subdivided, locally deleterious
axvspan(mu1 * (1 + s/delta), m_dagger,
        facecolor='#3182bd', linewidth=0)
# unstructured, deleterious
axvspan(m_dagger, 1, 
        facecolor='#a1d99b', linewidth=0)

# ## Text
# # Add regime labels
# # Unstructured, deleterious
# center = sqrt(m_dagger)
# t1_center = t1_tot[(np.abs(m_arr - center)).argmin()]
# text_unstructured = text(center, t1_center * 10**2, 
#         r'{\centering unstructured\\deleterious\\}', color='0',
#         horizontalalignment='center', verticalalignment='bottom')
# # Subdivided, locally deleterious
# center = sqrt(m_dagger * mu1 * (1 + s/delta))
# t1_center = t1_tot[(np.abs(m_arr - center)).argmin()]
# text_subdivided = text(center, t1_center / 10**2.2,
#         r'{\centering subdivided\\locally deleterious\\}', color='0',
#         horizontalalignment='center', verticalalignment='top')
# # Isolated demes, locally deleterious
# center = sqrt(1e-10 * mu1 * (1 + s/delta))
# t1_center = t1_tot[(np.abs(m_arr - center)).argmin()]
# text_isolated = text(center, t1_center / 10**1.5,
#         r'{\centering isolated demes\\locally\\deleterious\\}', color='0',
#         horizontalalignment='center', verticalalignment='top')
# # text_isolated = text(center * 10**0.2, p1_center / 10**0.5,
# #         r'{\centering isolated demes\\locally deleterious\\}', color='0',
# #         horizontalalignment='center', verticalalignment='top')

## Spines
# Clip left and bottom axes to data range
ax.spines['left'].set_bounds(ax.get_yticks().min(), ax.get_yticks().max())
# ax.spines['bottom'].set_bounds(m_arr.min(), m_arr.max())
ax.spines['bottom'].set_bounds(ax.get_xticks(minor=True).min(),
        ax.get_xticks(minor=True).max())

# Save figure
# This figure comes out to 3.5 inches wide

# If a cla() has been called, it is necessary to first call this again:
fig.set_size_inches(2 * axes_size, forward=True)

# This will trim whitespace while keeping axes at size axes_size
fig.savefig('/tmp/t1_D8.pdf', bbox_inches='tight', pad_inches=0.02)

# This will replace the manuscript's figure
fig.savefig('/home/michael/research/valley_crossing/metapopulations/asexual/tex/figures/t1_D8.pdf', bbox_inches='tight', pad_inches=0.02)

