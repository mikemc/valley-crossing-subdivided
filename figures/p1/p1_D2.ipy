"""Figure of $p_1$ for D=2.

"""
import sys
import numpy as np
import matplotlib.pyplot as plt

from pylab import *

sys.path += ['/home/michael/research/valley_crossing/metapopulations/asexual/'\
        + 'src/analysis/']
import predictions as pred

# Configure matplotlib
from matplotlib import rcParams
%run ~/research/valley_crossing/metapopulations/asexual/src/figures/matplotlib_rcparams.py

## Colors
# Color for main prediction line
# Original color was '#FF9900'; color on SMBE poster is '#e6550d' 
color_pred = '#e6550d'

##### Set parameters and load the data
# Parameters
L = 50; N = 500; Ntot = L * N;
alpha = 0.5; Ne = N / (2 * alpha)
mu1 = 2e-8; delta = 2e-3; s = 5e-2;
p2 = s / alpha

# Read in data
% cd /home/michael/Dropbox/research/valley_crossing/metapopulations/asexual/
% cd src/simulations/successful_single_mutants/
% cd output/island_L50_N5e2_mu2e-8_d2e-3_s5e-2
df = np.load('summary_data.npy')
df[0]['num_success'] += df[0]['num_seg']

#### Make the plot
# Initially, make the figure twice as big as it needs to be to ensure enough
# room, and then trim whitespace when saving
axes_size = array((3, 1.75))
fig = plt.figure()
fig.set_size_inches(2 * axes_size)
# Set axes rectagle (left, bottom, width, height) to occupy the center of the
# figure. Numbers are fractions of the figure width/height.
ax = fig.add_axes((0.25, 0.25, 0.5, 0.5))
## Spines
# Hide the right and top spines
ax.spines['right'].set_visible(False)
ax.spines['top'].set_visible(False)
## Tick lines
# Only show ticks on the left and bottom spines
ax.yaxis.set_ticks_position('left')
ax.xaxis.set_ticks_position('bottom')
## X axis
ax.set_xlabel(r"Migration rate, $m$", labelpad=3)
ax.set_xscale("log")
ax.set_xlim(1e-9, 1)
# Major tick marks at special locations
m_dagger = delta * (delta + s) / (s * (exp(N*delta/alpha)-1))
ax.set_xticks((mu1 * (1 + s / delta), m_dagger, alpha/N))
# ax.set_xticklabels((r'$\mu_1 \left(1 + \frac{s}{\delta}\right)$', 
#     r'$m^\dagger$', r'$\frac{\alpha}{N}$'))
ax.set_xticklabels((r'$\frac{\mu_1 (\delta + s)}{\delta}$', 
    r'$\frac{\eta\alpha}{N}$', r'$\frac{\alpha}{N}$'))
# Minor ticks to denote orders of magnitude; avoid overlapping with major ticks
ax.set_xticks((1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1), minor=True)
ax.set_xticklabels((r'$10^{-8}$',) + ('',)*7 + (r'$1$',), minor=True)
ax.tick_params(axis='both', colors='0.5', which='minor')
## Y axis
ax.set_yscale("log")
ax.set_ylim(3e-7, 3e-3)
# Major tick marks at special locations
ax.set_yticks((mu1*s/(alpha*delta),
    delta / (alpha * (exp(N*delta/alpha)-1)),
    1/N))
ax.set_yticklabels((r'$\frac{\mu_1 s}{\alpha\delta}$', 
    # r'$\frac{\delta}{\alpha (e^{N\delta/\alpha}-1)}$', 
    r'$\frac{\delta/\alpha}{e^{N\delta/\alpha}-1}$', 
    r'$\frac{1}{N}$'))

# Minor ticks to denote orders of magnitude
ax.set_yticks((1e-5, 1e-4, 1e-3), minor=True)
ax.set_yticklabels((r'$10^{-5}$', r'$10^{-4}$', ''), minor=True)
# Y label horizontal and above axis
ylab = text(3e-10, 3.5e-3, 
    r'\noindent Probability single mutant\\is successful, $p_1$', 
    horizontalalignment='left', verticalalignment='bottom')

## Plot predictions

# Neutral Feq method
m_arr = np.logspace(-8.5, 0, 300)
Feq_arr = 1 / (1 + N * m_arr / alpha)
p1_arr = np.array([pred.p1_wm_exact(alpha*(1-F), mu1, delta*(1-F), s*(1-F),
    p2=s/alpha) for F in Feq_arr])
plot(m_arr, p1_arr, 'k-', color='0.8', label=r'prediction')


## MSE method: using numerical estimate of equilibrium F in infinite island
# Calculation from the MSE frequency
# m_arr = np.logspace(-7, 0, 2e2)
# mu_f = 1e-10
# w_arr = np.array([pred.mse_freq(N, alpha, m, delta, mu_f, mu_b=0, upper_lim=None)/mu_f for m in m_arr])
# p1_arr = w_arr * mu1 * s / alpha
# plot(m_arr, p1_arr, 'k-.', color=color_pred, label=r'Predicted')

# Calculation from the value of F at MSE (identical results)
xtot = 1e-10
f_arr = np.array([pred.phi_stats(xtot, N, alpha, m, delta)[3] for m in m_arr])
p1_arr = mu1 * s / (alpha * delta * (1-f_arr))
plot(m_arr, p1_arr, 'k-', color=color_pred, label=r'Predicted')

# Deme birth-death approximation
p1_dbd_arr = np.array([pred.p1_sub_deme_bd(N, alpha, mu1, delta, s, m) 
    for m in m_arr])
plot(m_arr, p1_dbd_arr, 'k--', color=color_pred, label=r'prediction')


## Simulation results 
# Estimated p1
p1_est = df['num_success'] / df['num_runs']
# Estimated standard error of the estimated p1
p1_se = np.sqrt(p1_est / df['num_runs'])
# This is small enough that we shouldn't need to plot it. Always double check
# this on the final figure.
# errorbar(df['m'], p1_est, yerr=1.96*p1_se, fmt='ko', label=r'$p_1$', clip_on=False)
plot(df['m'], p1_est, 'ko', clip_on=False, label=r'$p_1$')

## Spines
# Clip left and bottom axes to data range
ax.spines['left'].set_bounds(ax.get_yticks().min(), ax.get_yticks().max())
# ax.spines['bottom'].set_bounds(m_arr.min(), m_arr.max())
ax.spines['bottom'].set_bounds(ax.get_xticks(minor=True).min(),
        ax.get_xticks(minor=True).max())

# Save figure
# %cd ~/Dropbox/research/valley_crossing/metapopulations/asexual/tex/figures/
# In Genetics Overleaf example file, width of a one-column figure is 3.461 in
# and entire page width (text area) is 7.275 inches
# However, in current genetics articles the text-page size is 7.022 in and one
# column of text is 3.406 in. 
# I will aim for 3.4 inches for a one-column figure.

# If a cla() has been called, it is necessary to first call this again:
fig.set_size_inches(2 * axes_size, forward=True)

# This will trim whitespace while keeping axes at size axes_size
fig.savefig('/tmp/p1_D2.pdf', bbox_inches='tight', pad_inches=0.02)

# This will replace the manuscript's figure
fig.savefig('/home/michael/research/valley_crossing/metapopulations/asexual/tex/figures/p1_D2.pdf', bbox_inches='tight', pad_inches=0.02)

